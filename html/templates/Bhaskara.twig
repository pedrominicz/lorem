{% extends "App.twig" %}

{% block title %} Bhaskara {% endblock %}

{% block body %}

{% if answer %}
<div class="alert alert-{{ answer.style }}" role="alert">
  <h4 class="alert-heading">{{ answer.title }}</h4>
  {% if answer.message %}
    {{ answer.message }}
  {% else %}
    Primeiro calcule o delta:<br>
    &Delta; = b&sup2; - 4ac = {{ answer.delta }}<br>
    {% if answer.x %}
      O delta é zero, porém só existe uma raiz:<br>
      x = -b / 2a = {{ answer.x }}
    {% else %}
      Existem duas raizes:<br>
      x<sub>1</sub> = (-b + &radic;&Delta;) / 2a = {{ answer.x1 }}<br>
      x<sub>2</sub> = (-b - &radic;&Delta;) / 2a = {{ answer.x2 }}
    {% endif %}
  {% endif %}
</div>
{% endif %}


<p class="text-center">
ax&sup2; + bx + c = 0
</p>

<form action="/bhaskara" method="get">

  <div class="form-group">
    <label for="a">a</label>
    <input type="text" class="form-control" name="a" id="a" maxlength="25" oninvalid="setCustomValidity('Por favor, preencha este campo.')" oninput="setCustomValidity('')" value="1" required>
  </div>

  <div class="form-group">
    <label for="b">b</label>
    <input type="text" class="form-control" name="b" id="b" maxlength="25" oninvalid="setCustomValidity('Por favor, preencha este campo.')" oninput="setCustomValidity('')" value="0" required>
  </div>

  <div class="form-group">
    <label for="c">c</label>
    <input type="text" class="form-control" name="c" id="c" maxlength="25" oninvalid="setCustomValidity('Por favor, preencha este campo.')" oninput="setCustomValidity('')" value="-1" required>
  </div>

  <button type="submit" class="btn btn-primary">Enviar</button>

</form>
{% endblock %}

{% block script %}
'use strict';

// Está função é usada para criar filtros que verificam enquanto o usuário
// digita.
const setFilter = (element, filter) => {
  ['input', 'keydown', 'keyup', 'mousedown', 'mouseup', 'select', 'contextmenu', 'drop'].forEach((event) => {
    element.addEventListener(event, function() {
      if(filter(this.value)) {
        this.oldValue = this.value;
        this.oldSelectionStart = this.selectionStart;
        this.oldSelectionEnd = this.selectionEnd;
      } else if(this.hasOwnProperty('oldValue')) {
        this.value = this.oldValue;
        this.setSelectionRange(this.oldSelectionStart, this.oldSelectionEnd);
      } else {
        this.value = '';
      }
    });
  });
}

['a', 'b', 'c'].forEach((id) => {
  setFilter(document.getElementById(id), (value) => {
    const re1 = /^[-0-9,]*$/;
    const re2 = /,/g;
    const re3 = /-/g;

    const count1 = (value.match(re2) || []).length;
    const count2 = (value.match(re3) || []).length;

    // `indexOf` retorna `-1` se não encontrar a _string_.
    const minus = value.indexOf('-') < 1;

    return re1.test(value) && count1 < 2 && count2 < 2 && minus;
  });
});
{% endblock %}
