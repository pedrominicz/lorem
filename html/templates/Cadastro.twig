{% extends "App.twig" %}

{% block title %} Respostas {% endblock %}

{% block body %}

{% if alert %}
<div class="alert alert-{{ alert.style }}" role="alert">
  <h4 class="alert-heading">{{ alert.title }}</h4>
  {{ alert.message }}
</div>
{% endif %}

<form action="/cadastro" method="get">

  <div class="form-group">
    <label for="name">Nome</label>
    <input type="text" class="form-control" name="name" id="name" maxlength="127" oninvalid="setCustomValidity('Por favor, insira um noma válido.')" oninput="setCustomValidity('')" required>
  </div>

  <div class="form-group">
    <label for="email">E-mail</label>
    <input type="email" class="form-control" name="email" id="email" maxlength="127" oninvalid="setCustomValidity('Por favor, insira um e-mail válido.')" oninput="setCustomValidity('')" required>
  </div>

  <div class="form-group">
    <label for="phone">Telefone</label>
    <input type="text" class="form-control" name="phone" id="phone" maxlength="25" oninvalid="setCustomValidity('Por favor, insira um telefone válido.')" oninput="setCustomValidity('')" required>
  </div>

  <div class="form-group">
    <label for="age">Idade</label>
    <input type="number" class="form-control" name="age" id="age" min="0" max="99" oninvalid="setCustomValidity('Por favor, insira uma idade válida.')" oninput="setCustomValidity('')" required>
  </div>

  <button type="submit" class="btn btn-primary">Enviar</button>

</form>
{% endblock %}

{% block script %}
'use strict';

// Está função é usada para criar filtros que verificam enquanto o usuário
// digita.
const setFilter = (element, filter) => {
  ['input', 'keydown', 'keyup', 'mousedown', 'mouseup', 'select', 'contextmenu', 'drop'].forEach((event) => {
    element.addEventListener(event, function() {
      if(filter(this.value)) {
        this.oldValue = this.value;
        this.oldSelectionStart = this.selectionStart;
        this.oldSelectionEnd = this.selectionEnd;
      } else if(this.hasOwnProperty('oldValue')) {
        this.value = this.oldValue;
        this.setSelectionRange(this.oldSelectionStart, this.oldSelectionEnd);
      } else {
        this.value = '';
      }
    });
  });
}

setFilter(document.getElementById('name'), (value) => {
  // Um nome só deve conter letras e espaços.
  const re1 = /^[ A-Za-z]*$/;
  // Um nome _não_ deve conter dois (ou mais) espaços em seguida.
  const re2 = /  /;

  return re1.test(value) && !re2.test(value);
});

setFilter(document.getElementById('phone'), (value) => {
  // Um telefone pode conter números, parêntesis, espaços, traços e sinais de
  // mais.
  const re1 = /^[ -()+0-9]*$/;
  // Um telefone _não_ deve conter dois (ou mais) espaços em seguida.
  const re2 = /  /;

  // Excluindo os parêntesis e sinais, um telefone deve conter no máximo 15
  // digitos ([referência](https://en.wikipedia.org/wiki/E.164)).
  if(value.replace(/[^0-9]/g, '').length > 15) {
    return false;
  }

  return re1.test(value) && !re2.test(value);
});

setFilter(document.getElementById('age'), (value) => {
  // Uma idade contém no máximo dois digitos.
  const re = /^[0-9]{0,2}$/;

  return re.test(value);
});

const url = new URL(window.location.href);

const name  = document.getElementById('name');
const email = document.getElementById('email');
const phone = document.getElementById('phone');
const age   = document.getElementById('age');

if(url.searchParams.get('name')) {
  name.value = url.searchParams.get('name');
}

if(url.searchParams.get('email')) {
  email.value = url.searchParams.get('email');
}

if(url.searchParams.get('phone')) {
  phone.value = url.searchParams.get('phone');

  const length = phone.value.replace(/[^0-9]/g, '').length;

  if(length > 15 || length < 8) {
    phone.setCustomValidity('Por favor, insira um telefone válido.');
  }
}

if(url.searchParams.get('age')) {
  age.value = url.searchParams.get('age');
}
{% endblock %}
